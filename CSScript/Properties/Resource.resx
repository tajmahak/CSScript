<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="favicon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\favicon.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="HelpText" xml:space="preserve">
    <value>Утилита для выполнения C# скриптов.
────────────────────────────────────────────────────────────────────────────────────────────────────
ПРАВИЛА СОСТАВЛЕНИЯ СКРИПТОВ:

- Скрипты сохраняются в *.cssc файлы. Скрипты могут быть исполняемыми, могут быть библиотеками,
  функции которых используются другими скриптами.

- При запуске код скрипта преобразуется в компилируемый код C# и запускается в собственном классе-
  контейнере с методом Start() для запуска кода.
  
- Код скрипта состоит из процедурного кода и других допонительных блоков: 

  #using              Конструкция C# using. Блок может использоваться в любой части кода. Пример:
                      │ #using System.Text
                      │ #using System.Threading
			          
  #import             Подключение других скриптов или сборок Windows, используемых в скрипте
                      (*.cssc, *.exe, *.dll). Блок может использоваться в любой части кода. Пример:
                      │ #import script.cssc
                      │ #import someLibrary.dll
                      │ #import System.Design
			          
  #class              Код внутри класса контейнера скомпилированного скрипта. Количество строк кода
                      ограничивается объявлением другого блока (кроме однострочных блоков #using и
					  #import). Пример:
                      │ #class
                      │ // Код внутри класса-контейнера
				      
  #ns, #namespace     Код внутри пространства имён, в котором находится класс контейнера
					  скомпилированного скрипта. Количество строк кода ограничивается объявлением
					  другого блока (кроме однострочных блоков #using и #import). Пример:
                      │ #namespace
                      │ // Код внутри пространства имён

  #init				  Код инициализации, выполняемый в методе Start() до начала процедурного кода
                      запускаемого скрипта. Может использоваться *.cssc библиотеками, т.к.
					  процедурный код подключаемого скрипта игнорируется. Пример:
                      │ #init
                      │ // Код инициализации
────────────────────────────────────────────────────────────────────────────────────────────────────
ЗАПУСК:

Синтаксис команды: CSScript.exe [SCRIPT_PATH] [OPTIONS]

Дополнительные опции:

  -h                 Выполнение скрипта в скрытом режиме.
		             
  -p                 После окончания работы скрипта принудительно ожидать от пользователя
                     подтверждение закрытия окна (не работает в скрытом режиме).
		
  -a &lt;SCRIPT_ARGS&gt;   Параметры командной строки, передаваемые утилитой скрипту.
  
  -reg               Регистрация утилиты в реестре Windows для поддержки .cssc файлов. При указании
                     опции путь к скрипту не требуется.
					 
  -unreg             Удаление регистрации утилиты из реестра Windows. При указании опции путь к
                     скрипту не требуется.
────────────────────────────────────────────────────────────────────────────────────────────────────
ВЗАИМОДЕЙСТВИЕ С КОНТЕКСТОМ:

Для взаимодействия скрипта с утилитой в классе-контейнере используется свойство 'Context',
объявленное в классе контейнера:

│ Context: IScriptContext
│   - реализация интерфейса для взаимодействия скрипта с контекстом:
│
│  .Args: string[]
│    - получает входящие аргументы командной строки;
│
│  .ExitCode: int
│    - получает или задаёт код возврата скрипта;
│
│  .Pause: bool
│    - получает или задаёт значение, следует ли ожидать от пользователя подтверждение закрытия;
│
│  .ScriptPath: string
│    - получает абсолютный путь к исполняемому скрипту;
│
│  .OutLog: IList&lt;LogFragment&gt;
│    - получает лог работы скрипта (стандартный выходной поток);
│
│  .ErrorLog: IList&lt;LogFragment&gt;
│    - получает лог работы скрипта (стандартный поток ошибок);
│
│  .Write(value: object, [color: ConsoleColor]): void
│    - вывод сообщения в лог;
│
│  .WriteLine([value: object], [color: ConsoleColor]): void
│    - вывод сообщения в лог с переносом строки;
│
│  .WriteError(value: object): void
│    - вывод сообщения в лог ошибок;
│
│  .WriteErrorLine([value: object]): void
│    - вывод сообщения в лог ошибок с переносом строки;
│
│  .ReadLine([caption: string], [color: ConsoleColor]): string
│    - чтение текста из входного потока;
│
│  .RegisterProcess(process: Process): void
│    - регистрация созданного процесса для автозакрытия в случае ошибки в работе скрипта;

Также в классе-контейнере есть свойство 'Colors', представляющее цветовую схему:

│ Colors: ColorScheme
│   - получает цвета для использования в консоли (аналог Context.ColorScheme);
│
│  .Foreground
│    - цвет основного текста;
│
│  .Caption
│    - цвет заголовка;
│
│  .Info
│    - цвет информационного текста;
│
│  .Success
│    - цвет сообщения об успешной операции;
│
│  .Error
│    - цвет сообщения об ошибке;
────────────────────────────────────────────────────────────────────────────────────────────────────
ПРИМЕР СКРИПТА:

│ // Выполнение кода в основной области (внутри процедуры)
│ PrintHelloWorld();
│
│ // Начало области внутри класса
│ #class
│
│ void PrintHelloWorld() {
│     string scriptName = Path.GetFileName(Context.ScriptPath);
│     Context.WriteLine("Hello World from " + scriptName, Colors.Caption);
│ }
│
│ // Директиву using допустимо использовать в любой части скрипта
│ #using System.IO;</value>
  </data>
</root>